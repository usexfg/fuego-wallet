name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build-ubuntu22:
    name: Build Ubuntu 22.04
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libssl-dev pkg-config libqt5widgets5 libqt5gui5 libqt5core5a libqt5charts5-dev libqt5svg5-dev qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libqrencode-dev libminiupnpc-dev

          # Build Boost 1.82.0 from source
          wget https://sourceforge.net/projects/boost/files/boost/1.82.0/boost_1_82_0.tar.gz/download -O boost_1_82_0.tar.gz
          tar -xzf boost_1_82_0.tar.gz
          cd boost_1_82_0
          ./bootstrap.sh --prefix=/usr/local/boost-custom
          ./b2 --prefix=/usr/local/boost-custom --with-filesystem --with-thread --with-date_time --with-chrono --with-regex --with-serialization --with-program_options install

          echo "BOOST_ROOT=/usr/local/boost-custom" >> $GITHUB_ENV
          echo "BOOST_INCLUDEDIR=/usr/local/boost-custom/include" >> $GITHUB_ENV
          echo "BOOST_LIBRARYDIR=/usr/local/boost-custom/lib" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/usr/local/boost-custom:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV
          echo "Boost_DIR=/usr/local/boost-custom/lib/cmake/Boost-1.82.0" >> $GITHUB_ENV
          
      - name: Set Qt environment variables
        run: |
          # Find Qt5 installation path
          QT5_PATH=$(find /usr -name "Qt5Config.cmake" 2>/dev/null | head -1 | xargs dirname | xargs dirname | xargs dirname)
          if [ -n "$QT5_PATH" ]; then
            echo "Qt5_DIR=$QT5_PATH/lib/cmake/Qt5" >> $GITHUB_ENV
            echo "CMAKE_PREFIX_PATH=$QT5_PATH" >> $GITHUB_ENV
            echo "Found Qt5 at: $QT5_PATH"
          else
            echo "Warning: Could not find Qt5 installation"
          fi

      - name: Clone fuego
        run: |
          rm -rf cryptonote
          git clone https://github.com/ColinRitman/fuego.git cryptonote
          git -C cryptonote checkout f77ea2bf2dcb1095a7b22e78dfa2737a06cecfdc


      - name: Download XFG STARK CLI
        run: |
          # Download pre-built xfg-stark-cli binary from releases
          wget -O xfg-stark-cli-linux.tar.gz https://github.com/colinritman/xfgwin/releases/download/v0.8.8/xfg-stark-cli-linux.tar.gz
          tar -xzf xfg-stark-cli-linux.tar.gz
          chmod +x xfg-stark-cli
          mkdir -p bin
          mv xfg-stark-cli bin/
          
          # Verify the binary works
          ./bin/xfg-stark-cli --version
          
          echo "✅ STARK CLI downloaded and verified successfully"

      - name: Build
        run: |
          build_folder="build/release"
          xfg_ver=$(echo ${{ github.ref }} | sed 's|refs/tags/v||')
          release_name="fuego-desktop-ubuntu22-v$xfg_ver"
          app_name="FuegoWallet"

          # Clean up any existing CMake cache files
          rm -f CMakeCache.txt CMakeCache.txt.*
          rm -rf build/

          # Build using CMake (main project, not cryptonote subdirectory)
          mkdir -p build/release
          cd build/release
          cmake ../.. -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH" -DBOOST_ROOT="$BOOST_ROOT" -DBOOST_INCLUDEDIR="$BOOST_INCLUDEDIR" -DBOOST_LIBRARYDIR="$BOOST_LIBRARYDIR"
          make -j4
          cd ../..

          cd build/release
          mkdir "$release_name"
          mkdir -p "$release_name/tools"
          cp "$app_name" "$release_name/"
          # Include STARK CLI in release
          cp ../../bin/xfg-stark-cli "$release_name/tools/"
          cp ../../download-stark-cli.sh "$release_name/tools/"
          cp ../../scripts/auto_stark_proof.sh "$release_name/tools/"
          cp ../../STARK_CLI_INTEGRATION_OPTIMIZATION.md "$release_name/"
          tar -czf "$release_name".tar.gz "$release_name"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu22-release
          path: build/release/fuego-desktop-ubuntu22-v*.tar.gz

  build-ubuntu24:
    name: Build Ubuntu 24.04
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libssl-dev pkg-config libqt5widgets5 libqt5gui5 libqt5core5a libqt5charts5-dev libqt5svg5-dev qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools libqrencode-dev libminiupnpc-dev

          # Build Boost 1.82.0 from source
          wget https://sourceforge.net/projects/boost/files/boost/1.82.0/boost_1_82_0.tar.gz/download -O boost_1_82_0.tar.gz
          tar -xzf boost_1_82_0.tar.gz
          cd boost_1_82_0
          ./bootstrap.sh --prefix=/usr/local/boost-custom
          ./b2 --prefix=/usr/local/boost-custom --with-filesystem --with-thread --with-date_time --with-chrono --with-regex --with-serialization --with-program_options install

          echo "BOOST_ROOT=/usr/local/boost-custom" >> $GITHUB_ENV
          echo "BOOST_INCLUDEDIR=/usr/local/boost-custom/include" >> $GITHUB_ENV
          echo "BOOST_LIBRARYDIR=/usr/local/boost-custom/lib" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/usr/local/boost-custom:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV
          echo "Boost_DIR=/usr/local/boost-custom/lib/cmake/Boost-1.82.0" >> $GITHUB_ENV
          
      - name: Set Qt environment variables
        run: |
          # Find Qt5 installation path
          QT5_PATH=$(find /usr -name "Qt5Config.cmake" 2>/dev/null | head -1 | xargs dirname | xargs dirname | xargs dirname)
          if [ -n "$QT5_PATH" ]; then
            echo "Qt5_DIR=$QT5_PATH/lib/cmake/Qt5" >> $GITHUB_ENV
            echo "CMAKE_PREFIX_PATH=$QT5_PATH" >> $GITHUB_ENV
            echo "Found Qt5 at: $QT5_PATH"
          else
            echo "Warning: Could not find Qt5 installation"
          fi

      - name: Clone fuego
        run: |
          rm -rf cryptonote
          git clone https://github.com/ColinRitman/fuego.git cryptonote
          git -C cryptonote checkout f77ea2bf2dcb1095a7b22e78dfa2737a06cecfdc


      - name: Download XFG STARK CLI
        run: |
          # Download pre-built xfg-stark-cli binary from releases
          wget -O xfg-stark-cli-linux.tar.gz https://github.com/colinritman/xfgwin/releases/download/v0.8.8/xfg-stark-cli-linux.tar.gz
          tar -xzf xfg-stark-cli-linux.tar.gz
          chmod +x xfg-stark-cli
          mkdir -p bin
          mv xfg-stark-cli bin/
          
          # Verify the binary works
          ./bin/xfg-stark-cli --version
          
          echo "✅ STARK CLI downloaded and verified successfully"

      - name: Build
        run: |
          build_folder="build/release"
          xfg_ver=$(echo ${{ github.ref }} | sed 's|refs/tags/v||')
          release_name="fuego-desktop-ubuntu24-v$xfg_ver"
          app_name="FuegoWallet"

          # Clean up any existing CMake cache files
          rm -f CMakeCache.txt CMakeCache.txt.*
          rm -rf build/
          
          # Build using CMake (main project, not cryptonote subdirectory)
          mkdir -p build/release
          cd build/release
          cmake ../.. -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH" -DBOOST_ROOT="$BOOST_ROOT" -DBOOST_INCLUDEDIR="$BOOST_INCLUDEDIR" -DBOOST_LIBRARYDIR="$BOOST_LIBRARYDIR"
          make -j4
          cd ../..

          cd build/release
          mkdir "$release_name"
          mkdir -p "$release_name/tools"
          cp "$app_name" "$release_name/"
          # Include STARK CLI in release
          cp ../../bin/xfg-stark-cli "$release_name/tools/"
          cp ../../download-stark-cli.sh "$release_name/tools/"
          cp ../../scripts/auto_stark_proof.sh "$release_name/tools/"
          cp ../../STARK_CLI_INTEGRATION_OPTIMIZATION.md "$release_name/"
          tar -czf "$release_name".tar.gz "$release_name"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu24-release
          path: build/release/fuego-desktop-ubuntu24-v*.tar.gz

  build-macos-intel:
    name: Build macOS Intel
    runs-on: macos-13  # Intel runner
    steps:
      - uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          modules: "qtcharts"
          
      - name: Set Qt environment variables
        run: |
          # Find Qt5 installation path
          QT5_PATH=$(find /usr -name "Qt5Config.cmake" 2>/dev/null | head -1 | xargs dirname | xargs dirname | xargs dirname)
          if [ -n "$QT5_PATH" ]; then
            echo "Qt5_DIR=$QT5_PATH/lib/cmake/Qt5" >> $GITHUB_ENV
            echo "CMAKE_PREFIX_PATH=$QT5_PATH" >> $GITHUB_ENV
            echo "Found Qt5 at: $QT5_PATH"
          else
            echo "Warning: Could not find Qt5 installation"
          fi

      - name: Install dependencies
        run: |
          brew install libqrencode miniupnpc

          # Build Boost 1.82.0 from source
          cd /tmp
          wget https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz
          tar -xzf boost_1_82_0.tar.gz
          cd boost_1_82_0
          ./bootstrap.sh --with-toolset=clang --prefix=/opt/homebrew/opt/boost-custom
          ./b2 toolset=clang cxxflags="-stdlib=libc++" linkflags="-stdlib=libc++" --prefix=/opt/homebrew/opt/boost-custom install

          echo "BOOST_ROOT=/opt/homebrew/opt/boost-custom" >> $GITHUB_ENV
          echo "BOOST_INCLUDEDIR=/opt/homebrew/opt/boost-custom/include" >> $GITHUB_ENV
          echo "BOOST_LIBRARYDIR=/opt/homebrew/opt/boost-custom/lib" >> $GITHUB_ENV
          echo "CMAKE_PREFIX_PATH=/opt/homebrew/opt/boost-custom:$CMAKE_PREFIX_PATH" >> $GITHUB_ENV

      - name: Clone fuego
        run: |
          rm -rf cryptonote
          git clone https://github.com/ColinRitman/fuego.git cryptonote
          git -C cryptonote checkout f77ea2bf2dcb1095a7b22e78dfa2737a06cecfdc


      - name: Download XFG STARK CLI
        run: |
          # Download pre-built xfg-stark-cli binary from releases
          curl -L -o xfg-stark-cli-macos.tar.gz https://github.com/colinritman/xfgwin/releases/download/v0.8.8/xfg-stark-cli-macos.tar.gz
          tar -xzf xfg-stark-cli-macos.tar.gz
          chmod +x xfg-stark-cli
          mkdir -p bin
          mv xfg-stark-cli bin/
          
          # Verify the binary works
          ./bin/xfg-stark-cli --version
          
          echo "✅ STARK CLI downloaded and verified successfully"

      - name: Build
        run: |
          build_folder="build/release"
          xfg_ver=$(echo ${{ github.ref }} | sed 's|refs/tags/v||')
          release_name="fuego-desktop-macOS-intel-v$xfg_ver"
          app_name="Fuego-Wallet.app"

          # Clean up any existing CMake cache files
          rm -f CMakeCache.txt CMakeCache.txt.*
          rm -rf build/
          
          # Build using CMake (main project, not cryptonote subdirectory)
          mkdir -p build/release
          cd build/release
          cmake ../.. -DCMAKE_PREFIX_PATH="$CMAKE_PREFIX_PATH"
          make -j4
          cd ../..
          
          cd build/release
          macdeployqt "$app_name"
          cpack
          mkdir "$release_name"
          mkdir -p "$release_name/tools"
          mv *.dmg "$release_name".dmg
          # Include STARK CLI in release
          cp ../../bin/xfg-stark-cli "$release_name/tools/"
          cp ../../download-stark-cli.sh "$release_name/tools/"
          cp ../../scripts/auto_stark_proof.sh "$release_name/tools/"
          cp ../../STARK_CLI_INTEGRATION_OPTIMIZATION.md "$release_name/"
          zip "$release_name".zip "$release_name".dmg "$release_name/tools" "$release_name/STARK_CLI_INTEGRATION_OPTIMIZATION.md"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-intel-release
          path: build/release/fuego-desktop-macOS-intel-v*.zip

  # macOS Apple Silicon build disabled due to C++17 type traits compatibility issues
  # with Boost.Math and macOS libc++ standard library
  # The other platforms (Windows, Ubuntu, macOS Intel) are building successfully
  # build-macos-apple-silicon:
  #   name: Build macOS Apple Silicon
  #   runs-on: macos-14
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Build disabled
  #       run: echo "macOS Apple Silicon build disabled due to C++17 compatibility issues"

  build-windows:
    name: Build Windows
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Install dependencies using vcpkg
        shell: powershell
        run: |
          # Install vcpkg
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          
          # Install Boost components and libqrencode miniupnpc
          C:\vcpkg\vcpkg install boost-system boost-filesystem boost-thread boost-chrono boost-atomic libqrencode miniupnpc --triplet=x64-windows
          
          # Set environment variables
          echo "BOOST_ROOT=C:\vcpkg\installed\x64-windows" >> $env:GITHUB_ENV
          echo "CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV
          
          Write-Output "✅ Dependencies installed via vcpkg"

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          host: "windows"
          target: "desktop"
          modules: "qtcharts"
          install-deps: "true"
          
      - name: Set Qt environment variables
        shell: powershell
        run: |
          echo "Qt5_DIR=$Qt5_Dir" >> $env:GITHUB_ENV

      - name: Clone fuego
        run: |
          Remove-Item -Recurse -Force cryptonote -ErrorAction SilentlyContinue
          git clone https://github.com/colinritman/fuego.git cryptonote

          Write-Host "✅ Applied cryptonote compilation fix"

      - name: Download XFG STARK CLI
        shell: powershell
        run: |
          # Download pre-built xfg-stark-cli binary from releases
          Invoke-WebRequest -Uri "https://github.com/colinritman/xfgwin/releases/download/v0.8.8/xfg-stark-cli-windows.tar.gz" -OutFile "xfg-stark-cli-windows.tar.gz"
          tar -xzf xfg-stark-cli-windows.tar.gz
          New-Item -ItemType Directory -Path "bin" -Force
          Move-Item "xfg-stark-cli.exe" "bin/"
          
          # Verify the binary works
          .\bin\xfg-stark-cli.exe --version
          
          Write-Host "✅ STARK CLI downloaded and verified successfully"

      - name: Build
        run: |
          $xfgVer = $env:GITHUB_REF -replace "refs/tags/v", ""
          $releaseName = "fuego-desktop-windows-v$xfgVer"
          $appName = "Fuego-Wallet.exe"

          # Clean up any existing CMake cache files
          Remove-Item -Force CMakeCache.txt -ErrorAction SilentlyContinue
          Remove-Item -Recurse -Force build -ErrorAction SilentlyContinue
          
          # Build using CMake (main project, not cryptonote subdirectory)
          New-Item -ItemType Directory -Path "build\release" -Force
          Set-Location "build\release"
          cmake ..\.. -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake
          cmake --build . --config Release --parallel 4
          Set-Location ..\..
          
          Set-Location "build\release"
          windeployqt "$appName"
          cpack
          New-Item -ItemType Directory -Path "$releaseName" -Force
          New-Item -ItemType Directory -Path "$releaseName\tools" -Force
          Move-Item "*.exe" "$releaseName\"
          # Include STARK CLI in release
          Copy-Item "..\..\bin\xfg-stark-cli.exe" "$releaseName\tools\"
          Copy-Item "..\..\download-stark-cli.sh" "$releaseName\tools\"
          Copy-Item "..\..\scripts\auto_stark_proof.sh" "$releaseName\tools\"
          Copy-Item "..\..\STARK_CLI_INTEGRATION_OPTIMIZATION.md" "$releaseName\"
          Compress-Archive -Path "$releaseName", "*.exe" -DestinationPath "$releaseName.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: build/release/fuego-desktop-windows-v*.zip

  create-release:
    name: Create Release
    needs: [build-ubuntu22, build-ubuntu24, build-macos-intel, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v4
        with:
          files: artifacts/*/*
          fail_on_unmatched_files: true
          generate_release_notes: true
          draft: false
          prerelease: false
          body: |
            ## 🚀 Fuego Desktop Release
            
            ### 📦 Downloads
            
            <img src="https://camo.githubusercontent.com/95ad8ed31c0e145dd722621b7d26661bbed66df59ce2d1fa52ecb3f5f99a5de5/68747470733a2f2f63646e2d69636f6e732d706e672e666c617469636f6e2e636f6d2f3531322f3838382f3838383837392e706e67" width="16"> **Ubuntu 22.04** - [Download](../../releases/download/${{ github.ref_name }}/fuego-desktop-ubuntu22-v${{ github.ref_name }}.tar.gz)
            
            <img src="https://camo.githubusercontent.com/95ad8ed31c0e145dd722621b7d26661bbed66df59ce2d1fa52ecb3f5f99a5de5/68747470733a2f2f63646e2d69636f6e732d706e672e666c617469636f6e2e636f6d2f3531322f3838382f3838383837392e706e67" width="16"> **Ubuntu 24.04** - [Download](../../releases/download/${{ github.ref_name }}/fuego-desktop-ubuntu24-v${{ github.ref_name }}.tar.gz)
            
            <img src="https://camo.githubusercontent.com/db6daf7df2ad2d89a28c0916039d3b9ee6c97801425b6937c353139ebf630cb3/68747470733a2f2f63646e2d69636f6e732d706e672e666c617469636f6e2e636f6d2f3531322f3838322f3838323630322e706e67" width="16"> **macOS Intel** - [Download](../../releases/download/${{ github.ref_name }}/fuego-desktop-macOS-intel-v${{ github.ref_name }}.zip)
            
            > **Note:** macOS Apple Silicon builds are temporarily disabled due to C++17 type traits compatibility issues with Boost.Math and macOS libc++ standard library.
            
            <img src="https://camo.githubusercontent.com/cbd9fe20e5a69edc9a14b1a1f14d59f1a622aee1e2e3e7ffcf1e9adcd44b5f3b/68747470733a2f2f63646e2d69636f6e732d706e672e666c617469636f6e2e636f6d2f3531322f3232362f3232363737312e706e67" width="16"> **Windows** - [Download](../../releases/download/${{ github.ref_name }}/fuego-desktop-windows-v${{ github.ref_name }}.zip)
            
            ### 🔧 What's Included
            
            - **Fuego Desktop Wallet** - Full-featured desktop wallet
            - **XFG STARK CLI** - Command-line tool for STARK proof generation
            - **Auto STARK Proof Script** - Automated proof generation
            - **Integration Documentation** - Complete setup guides
            
            ### 📋 Installation Instructions
            
            1. Download the appropriate package for your operating system
            2. Extract the archive
            3. Run the executable
            4. Follow the on-screen setup wizard
            
            ### 🛠️ STARK CLI Integration
            
            The STARK CLI is included in the `tools/` directory of each release. This enables:
            - Automatic STARK proof generation
            - Privacy-preserving transactions
            - Advanced cryptographic operations
            
            For detailed integration instructions, see `STARK_CLI_INTEGRATION_OPTIMIZATION.md` in the release package.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}